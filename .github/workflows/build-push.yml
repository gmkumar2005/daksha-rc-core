name: Multi-platform Rust Build

on:
  push:
    branches:
      - main
      - 53_caching
  pull_request:
    branches:
      - main
      - 53_caching
  workflow_dispatch: # Allows manually triggering the workflow
    inputs:
      version:
        description: 'Version tag for the Docker image (e.g., 1.0.0, v2.1.3)'
        required: true
        type: string
        default: 'latest'


env:
  # --- Configuration Variables ---
  REGISTRY: ghcr.io
  IMAGE_NAME: daksha-rc/rc-web # Updated to use the specific image name
  # ---

jobs:
  build-and-push:
    runs-on: ubuntu-latest # GitHub-hosted runner (x86_64)
    permissions:
      contents: read # Required to checkout code
      packages: write # Required for pushing to GitHub Container Registry (ghcr.io)
      id-token: write # Required for OIDC authentication with some registries, though not strictly needed for GITHUB_TOKEN

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up QEMU for multi-platform builds
        # This action installs QEMU static binaries on the runner,
        # allowing Buildx to emulate different CPU architectures (e.g., ARM64 on an AMD64 runner).
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        # This action sets up BuildKit, which is crucial for:
        # - Multi-platform image building
        # - Advanced caching features (leveraged by cargo-chef)
        uses: docker/setup-buildx-action@v3

      - name: Log in to Container Registry
        # Authenticates with the specified container registry.
        # For ghcr.io, `github.actor` (your GitHub username) and `secrets.GITHUB_TOKEN` are used.
        # For Docker Hub, replace username/password with your Docker Hub credentials.
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }} # For ghcr.io, this is your GitHub username
          password: ${{ secrets.PUSH_PKG_TO_RC_ORG }} # For ghcr.io, this is the special token

      - name: Extract metadata (tags, labels) for Docker image
        # This action automatically generates various useful tags and labels
        # based on Git branches, tags, commit SHAs, etc.
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=schedule
            type=ref,event=branch # e.g., 'rc-web:main'
            type=ref,event=pr     # e.g., 'rc-web:pr-123'
            type=semver,pattern={{version}} # e.g., 'rc-web:1.0.0'
            type=semver,pattern={{major}}.{{minor}} # e.g., 'rc-web:1.0'
            type=sha,format=long # e.g., 'rc-web:a1b2c3d4e5f6...'
            type=raw,value=latest # Always tag with 'latest'
            type=raw,value=${{ github.event.inputs.version }},enable=${{ github.event_name == 'workflow_dispatch' && github.event.inputs.version != 'latest' }} # User-provided version tag

      - name: Build and Push Multi-Platform Docker image
        # This is the core step that builds your Docker image using BuildKit
        # and pushes it to the configured registry.
        uses: docker/build-push-action@v5
        with:
          context: ./rc-web # Updated context to point to rc-web directory
          file: ./rc-web/Dockerfile # Updated to use rc-web/Dockerfile
          # Define the target platforms to build for. BuildKit will create a multi-arch manifest list.
          platforms: linux/amd64,linux/arm64 # You can add more like 'linux/arm/v7', 'linux/386', etc.
          push: true # Set to 'true' to push the built image(s) to the registry
          tags: ${{ steps.meta.outputs.tags }} # Use the tags generated by 'docker/metadata-action'
          labels: ${{ steps.meta.outputs.labels }} # Use the labels generated by 'docker/metadata-action'
          # Configure BuildKit caching. Crucial for cargo-chef's efficiency!
          # 'type=gha' uses GitHub Actions' built-in cache.
          # 'scope' should be unique per image/project to avoid cache collisions.
          cache-from: |
            type=gha,scope=${{ github.workflow }}-${{ github.ref_name }} # Pull cache from previous runs on this branch
          cache-to: |
            type=gha,mode=max,scope=${{ github.workflow }}-${{ github.ref_name }} # Push all layers to cache for future use