name: Simple-Image-CI

on:
  push:
    branches:
      - main
      - 53_caching
  pull_request:
    branches:
      - main
      - 53_caching
  workflow_dispatch: # Allows manually triggering the workflow
    inputs:
      version:
        description: 'Version tag for the Docker image (e.g., 1.0.0, v2.1.3)'
        required: true
        type: string
        default: 'latest'

env:
  CARGO_TERM_COLOR: always

jobs:
  test:
    name: Test
    runs-on: ubuntu-latest
    container:
      image: rust:1.86.0

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup caching
        uses: actions/cache@v4
        if: ${{ env.ACT != 'true' }}
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-cargo-

      - name: Manual cache setup for local run
        if: ${{ env.ACT == 'true' }}
        run: |
          echo "Running locally with act, manually setting up cache..."
          mkdir -p ~/.cargo/registry ~/.cargo/git target

      - name: Build
        run: cargo build

      - name: Run Tests
        run: cargo test

  build:
    name: Build ${{ matrix.platform }}
    runs-on: ubuntu-latest
    needs: test
    container:
      image: rust:1.86.0

    strategy:
      matrix:
        include:
          - platform: amd64
            target: x86_64-unknown-linux-gnu
            artifact-name: rust-binary-amd64
          - platform: arm64
            target: aarch64-unknown-linux-gnu
            artifact-name: rust-binary-arm64

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup caching
        uses: actions/cache@v4
        if: ${{ env.ACT != 'true' }}
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ${{ runner.os }}-cargo-${{ matrix.target }}-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-cargo-${{ matrix.target }}-
            ${{ runner.os }}-cargo-

      - name: Manual cache setup for local run
        if: ${{ env.ACT == 'true' }}
        run: |
          echo "Running locally with act, manually setting up cache..."
          mkdir -p ~/.cargo/registry ~/.cargo/git target

      - name: Install cross-compilation target
        run: rustup target add ${{ matrix.target }}

      - name: Setup ARM64 cross-compilation
        if: matrix.platform == 'arm64'
        run: |
          dpkg --add-architecture arm64
          apt-get update
          apt-get install -y \
            gcc-aarch64-linux-gnu \
            libc6-dev-arm64-cross \
            libssl-dev:arm64 \
            libpq-dev:arm64 \
            pkg-config

      - name: Configure ARM64 cross-compilation environment
        if: matrix.platform == 'arm64'
        run: |
          echo "CC_aarch64_unknown_linux_gnu=aarch64-linux-gnu-gcc" >> $GITHUB_ENV
          echo "CXX_aarch64_unknown_linux_gnu=aarch64-linux-gnu-g++" >> $GITHUB_ENV
          echo "AR_aarch64_unknown_linux_gnu=aarch64-linux-gnu-ar" >> $GITHUB_ENV
          echo "CARGO_TARGET_AARCH64_UNKNOWN_LINUX_GNU_LINKER=aarch64-linux-gnu-gcc" >> $GITHUB_ENV
          echo "PKG_CONFIG_ALLOW_CROSS=1" >> $GITHUB_ENV
          echo "PKG_CONFIG_PATH=/usr/lib/aarch64-linux-gnu/pkgconfig:/usr/lib/pkgconfig" >> $GITHUB_ENV
          echo "OPENSSL_DIR=/usr" >> $GITHUB_ENV
          echo "OPENSSL_LIB_DIR=/usr/lib/aarch64-linux-gnu" >> $GITHUB_ENV
          echo "OPENSSL_INCLUDE_DIR=/usr/include/openssl" >> $GITHUB_ENV

      - name: Build Release Binary
        run: cargo build --release --target ${{ matrix.target }}

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.artifact-name }}
          path: target/${{ matrix.target }}/release/rc-web
          retention-days: 1

  docker-build:
    name: Build Docker Image
    runs-on: ubuntu-latest
    needs: build
    if: github.event_name == 'push' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/53_caching') || startsWith(github.ref, 'refs/tags/')

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Download AMD64 build artifacts
        uses: actions/download-artifact@v4
        with:
          name: rust-binary-amd64
          path: target/x86_64-unknown-linux-gnu/release/

      - name: Download ARM64 build artifacts
        uses: actions/download-artifact@v4
        with:
          name: rust-binary-arm64
          path: target/aarch64-unknown-linux-gnu/release/

      - name: Make binaries executable
        run: |
          chmod +x target/x86_64-unknown-linux-gnu/release/rc-web
          chmod +x target/aarch64-unknown-linux-gnu/release/rc-web

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.PUSH_PKG_TO_RC_ORG }}

      - name: Get latest git tag
        id: latest_tag
        run: |
          # Get the latest tag, fallback to a default if no tags exist
          TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "0.0.0")
          echo "tag=${TAG}" >> $GITHUB_OUTPUT
          echo "Latest git tag: ${TAG}"

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ghcr.io/daksha-rc/rc-web
          tags: |
            type=ref,event=pr
            type=semver,pattern={{version}},enable=${{ startsWith(github.ref, 'refs/tags/') }}
            type=semver,pattern={{major}}.{{minor}},enable=${{ startsWith(github.ref, 'refs/tags/') }}
            type=raw,value=latest,enable={{is_default_branch}}
            type=raw,value=${{ github.event.inputs.version }},enable=${{ github.event_name == 'workflow_dispatch' && github.event.inputs.version != '' }}
            type=raw,value=${{ steps.latest_tag.outputs.tag }},enable=${{ github.event_name == 'push' }}

      - name: Build and push Docker image
        id: build
        uses: docker/build-push-action@v6
        with:
          context: .
          file: ./rc-web/Dockerfile.simple
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          platforms: linux/amd64,linux/arm64
          cache-from: type=gha
          cache-to: type=gha,mode=max
          outputs: type=image,name=target,annotation-index.org.opencontainers.image.description=Multi-platform Rust web application

      - name: Success Notification
        if: success()
        run: |
          echo "🎉 Docker Build and Push Successful!"
          echo "================================================"
          echo "📦 IMAGES PUSHED:"
          echo "Repository: ghcr.io/daksha-rc/rc-web"
          echo ""
          echo "🏷️  TAGS:"
          echo "${{ steps.meta.outputs.tags }}" | while IFS= read -r tag; do
            if [[ -n "$tag" ]]; then
              echo "  ✅ $tag"
            fi
          done
          echo ""
          echo "🏗️  PLATFORMS:"
          echo "  ✅ linux/amd64"
          echo "  ✅ linux/arm64"
          echo ""
          echo "📋 BUILD DETAILS:"
          echo "  Build ID: ${{ steps.build.outputs.imageid }}"
          echo "  Digest: ${{ steps.build.outputs.digest }}"
          echo "  Metadata: ${{ steps.build.outputs.metadata }}"
          echo ""
          echo "🔗 REGISTRY URLS:"
          echo "${{ steps.meta.outputs.tags }}" | while IFS= read -r tag; do
            if [[ -n "$tag" ]]; then
              echo "  🌐 https://github.com/daksha-rc/rc-web/pkgs/container/rc-web"
            fi
          done
          echo ""
          echo "================================================"
          echo "✨ Ready to deploy!"