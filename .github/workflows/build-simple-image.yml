name: Simple-Image-CI

on:
  push:
    branches:
      - main
      - 53_caching
  pull_request:
    branches:
      - main
      - 53_caching
  workflow_dispatch: # Allows manually triggering the workflow
    inputs:
      version:
        description: 'Version tag for the Docker image (e.g., 1.0.0, v2.1.3)'
        required: true
        type: string
        default: 'latest'

env:
  CARGO_TERM_COLOR: always

jobs:
  buildandtest:
    name: cargo
    runs-on: ubuntu-latest
    container:
      image: rust:1.86.0

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup caching
        uses: actions/cache@v4
        if: ${{ env.ACT != 'true' }}
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-cargo-

      - name: Manual cache setup for local run
        if: ${{ env.ACT == 'true' }}
        run: |
          echo "Running locally with act, manually setting up cache..."
          mkdir -p ~/.cargo/registry ~/.cargo/git target

      - name: Build
        run: cargo build

      - name: Run Tests
        run: cargo test

      - name: Run Integration Tests
        run: cargo test --features integration_tests
        continue-on-error: true

      - name: Install cross-compilation targets
        run: |
          rustup target add x86_64-unknown-linux-gnu
          rustup target add aarch64-unknown-linux-gnu

      - name: Install cross-compilation dependencies
        run: |
          apt-get update
          apt-get install -y \
            gcc-aarch64-linux-gnu \
            libc6-dev-arm64-cross \
            libssl-dev:arm64 \
            libpq-dev:arm64 \
            pkg-config

      - name: Configure cross-compilation environment
        run: |
          echo "CC_aarch64_unknown_linux_gnu=aarch64-linux-gnu-gcc" >> $GITHUB_ENV
          echo "CXX_aarch64_unknown_linux_gnu=aarch64-linux-gnu-g++" >> $GITHUB_ENV
          echo "AR_aarch64_unknown_linux_gnu=aarch64-linux-gnu-ar" >> $GITHUB_ENV
          echo "CARGO_TARGET_AARCH64_UNKNOWN_LINUX_GNU_LINKER=aarch64-linux-gnu-gcc" >> $GITHUB_ENV
          echo "PKG_CONFIG_ALLOW_CROSS=1" >> $GITHUB_ENV
          echo "PKG_CONFIG_PATH=/usr/lib/aarch64-linux-gnu/pkgconfig" >> $GITHUB_ENV

      - name: Build Release Binary - AMD64
        run: cargo build --release --target x86_64-unknown-linux-gnu

      - name: Build Release Binary - ARM64
        run: cargo build --release --target aarch64-unknown-linux-gnu

      - name: Upload AMD64 build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: rust-binary-amd64
          path: target/x86_64-unknown-linux-gnu/release/rc-web
          retention-days: 1

      - name: Upload ARM64 build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: rust-binary-arm64
          path: target/aarch64-unknown-linux-gnu/release/rc-web
          retention-days: 1

  docker-build:
    name: Build Docker Image
    runs-on: ubuntu-latest
    needs: buildandtest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main' || startsWith(github.ref, 'refs/tags/')

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Download AMD64 build artifacts
        uses: actions/download-artifact@v4
        with:
          name: rust-binary-amd64
          path: target/x86_64-unknown-linux-gnu/release/

      - name: Download ARM64 build artifacts
        uses: actions/download-artifact@v4
        with:
          name: rust-binary-arm64
          path: target/aarch64-unknown-linux-gnu/release/

      - name: Make binaries executable
        run: |
          chmod +x target/x86_64-unknown-linux-gnu/release/rc-web
          chmod +x target/aarch64-unknown-linux-gnu/release/rc-web

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ghcr.io/daksha-rc/rc-web
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile.simple
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          platforms: linux/amd64,linux/arm64
          cache-from: type=gha
          cache-to: type=gha,mode=max