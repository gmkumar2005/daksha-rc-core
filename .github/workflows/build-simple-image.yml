name: Simple-Image-CI

on:
  push:
    branches: [main, 53_caching]
  pull_request:
    branches: [main, 53_caching]
  workflow_dispatch:
    inputs:
      version:
        description: 'Version tag for the Docker image (e.g., 1.0.0, v2.1.3)'
        required: true
        type: string
        default: 'latest'

env:
  CARGO_TERM_COLOR: always
  REGISTRY: ghcr.io
  IMAGE_NAME: daksha-rc/rc-web

jobs:
  test:
    name: Test
    runs-on: ubuntu-latest
    container:
      image: rust:1.86.0

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          fetch-tags: true

      - name: Setup caching
        uses: actions/cache@v4
        if: ${{ env.ACT != 'true' }}
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: ${{ runner.os }}-cargo-

      - name: Manual cache setup for local run
        if: ${{ env.ACT == 'true' }}
        run: |
          echo "Running locally with act, manually setting up cache..."
          mkdir -p ~/.cargo/registry ~/.cargo/git target

      - name: Build and Test
        run: |
          cargo build
          cargo test

  build:
    name: Build ${{ matrix.platform }}
    runs-on: ubuntu-latest
    needs: test
    container:
      image: rust:1.86.0

    strategy:
      matrix:
        include:
          - platform: amd64
            target: x86_64-unknown-linux-gnu
            artifact-name: rust-binary-amd64
          - platform: arm64
            target: aarch64-unknown-linux-gnu
            artifact-name: rust-binary-arm64

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup caching
        uses: actions/cache@v4
        if: ${{ env.ACT != 'true' }}
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ${{ runner.os }}-cargo-${{ matrix.target }}-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-cargo-${{ matrix.target }}-
            ${{ runner.os }}-cargo-

      - name: Manual cache setup for local run
        if: ${{ env.ACT == 'true' }}
        run: mkdir -p ~/.cargo/registry ~/.cargo/git target

      - name: Install cross-compilation target
        run: rustup target add ${{ matrix.target }}

      - name: Setup ARM64 cross-compilation
        if: matrix.platform == 'arm64'
        run: |
          dpkg --add-architecture arm64
          apt-get update
          apt-get install -y \
            gcc-aarch64-linux-gnu \
            libc6-dev-arm64-cross \
            libssl-dev:arm64 \
            libpq-dev:arm64 \
            pkg-config
          cat >> $GITHUB_ENV << 'EOF'
          CC_aarch64_unknown_linux_gnu=aarch64-linux-gnu-gcc
          CXX_aarch64_unknown_linux_gnu=aarch64-linux-gnu-g++
          AR_aarch64_unknown_linux_gnu=aarch64-linux-gnu-ar
          CARGO_TARGET_AARCH64_UNKNOWN_LINUX_GNU_LINKER=aarch64-linux-gnu-gcc
          PKG_CONFIG_ALLOW_CROSS=1
          PKG_CONFIG_PATH=/usr/lib/aarch64-linux-gnu/pkgconfig:/usr/lib/pkgconfig
          OPENSSL_DIR=/usr
          OPENSSL_LIB_DIR=/usr/lib/aarch64-linux-gnu
          OPENSSL_INCLUDE_DIR=/usr/include/openssl
          EOF

      - name: Build Release Binary
        run: cargo build --release --target ${{ matrix.target }}

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.artifact-name }}
          path: target/${{ matrix.target }}/release/rc-web
          retention-days: 1

  semantic-release:
    name: Semantic Release
    runs-on: ubuntu-latest
    needs: test
    if: github.event_name == 'push' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/53_caching')
    outputs:
      new-release-published: ${{ steps.semantic.outputs.new-release-published }}
      new-release-version: ${{ steps.semantic.outputs.new-release-version }}
      new-release-major-version: ${{ steps.semantic.outputs.new-release-major-version }}
      new-release-minor-version: ${{ steps.semantic.outputs.new-release-minor-version }}
      new-release-patch-version: ${{ steps.semantic.outputs.new-release-patch-version }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'yarn'

      - name: Install dependencies
        run: yarn install --frozen-lockfile

      - name: Run semantic-release
        id: semantic
        run: yarn semantic-release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Output release information
        run: |
          echo "New release published: ${{ steps.semantic.outputs.new-release-published }}"
          echo "New release version: ${{ steps.semantic.outputs.new-release-version }}"
          echo "New release major version: ${{ steps.semantic.outputs.new-release-major-version }}"
          echo "New release minor version: ${{ steps.semantic.outputs.new-release-minor-version }}"
          echo "New release patch version: ${{ steps.semantic.outputs.new-release-patch-version }}"

  docker-build:
    name: Build and Push Docker Images
    runs-on: ubuntu-latest
    needs: [build, semantic-release]
    if: always() && (needs.build.result == 'success') && (github.event_name == 'push' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/53_caching') || startsWith(github.ref, 'refs/tags/'))

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          fetch-tags: true

      - name: Download AMD64 build artifacts
        uses: actions/download-artifact@v4
        with:
          name: rust-binary-amd64
          path: artifacts/amd64/

      - name: Download ARM64 build artifacts
        uses: actions/download-artifact@v4
        with:
          name: rust-binary-arm64
          path: artifacts/arm64/

      - name: Prepare artifacts
        run: |
          mkdir -p target/x86_64-unknown-linux-gnu/release
          mkdir -p target/aarch64-unknown-linux-gnu/release
          mv artifacts/amd64/rc-web target/x86_64-unknown-linux-gnu/release/rc-web
          mv artifacts/arm64/rc-web target/aarch64-unknown-linux-gnu/release/rc-web
          chmod +x target/x86_64-unknown-linux-gnu/release/rc-web
          chmod +x target/aarch64-unknown-linux-gnu/release/rc-web
          ls -la target/*/release/rc-web
          rm -rf artifacts

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.PUSH_PKG_TO_RC_ORG }}

      - name: Determine version for Docker tags
        id: version
        run: |
          if [[ "${{ needs.semantic-release.outputs.new-release-published }}" == "true" ]]; then
            VERSION="${{ needs.semantic-release.outputs.new-release-version }}"
            echo "Using semantic-release version: $VERSION"
          elif [[ "${{ github.event_name }}" == "workflow_dispatch" && "${{ github.event.inputs.version }}" != "" ]]; then
            VERSION="${{ github.event.inputs.version }}"
            echo "Using manually provided version: $VERSION"
          else
            VERSION=$(git describe --tags --abbrev=0 2>/dev/null || echo "dev-${{ github.ref_name }}")
            echo "Using fallback version: $VERSION"
          fi
          
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "Final version: $VERSION"

      - name: Get commit and PR information
        id: git-info
        run: |
          # Get the previous tag/release
          PREV_TAG=$(git describe --tags --abbrev=0 HEAD^ 2>/dev/null || git rev-list --max-parents=0 HEAD)
          
          # Get commits since last release
          COMMITS=$(git log --oneline ${PREV_TAG}..HEAD --pretty=format:"- %s (%an)" | head -20)
          
          # Get merged PRs since last release
          PRS=$(git log --oneline ${PREV_TAG}..HEAD --grep="Merge pull request" --pretty=format:"- %s" | head -10)
          
          # Store in outputs (escape newlines)
          echo "prev-tag=$PREV_TAG" >> $GITHUB_OUTPUT
          {
            echo "commits<<EOF"
            echo "$COMMITS"
            echo "EOF"
          } >> $GITHUB_OUTPUT
          
          {
            echo "prs<<EOF"
            echo "$PRS"
            echo "EOF"
          } >> $GITHUB_OUTPUT
          
          echo "commit-count=$(echo "$COMMITS" | wc -l)" >> $GITHUB_OUTPUT

      - name: Extract metadata and generate tags
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=pr
            type=raw,value=latest,enable=${{ github.ref == 'refs/heads/main' || github.ref == 'refs/heads/53_caching' }}
            type=raw,value=${{ steps.version.outputs.version }},enable=${{ steps.version.outputs.version != '' }}
            type=raw,value=${{ needs.semantic-release.outputs.new-release-major-version }},enable=${{ needs.semantic-release.outputs.new-release-published == 'true' }}
            type=raw,value=${{ needs.semantic-release.outputs.new-release-major-version }}.${{ needs.semantic-release.outputs.new-release-minor-version }},enable=${{ needs.semantic-release.outputs.new-release-published == 'true' }}

      - name: Build and push Docker image (multi-arch, all tags)
        id: docker-build
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./rc-web/Dockerfile.simple
          push: true
          platforms: linux/amd64,linux/arm64
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Success notification
        if: success()
        run: |
          # Create a formatted list of built images
          TAGS_LIST=""
          while IFS= read -r tag; do
            if [[ -n "$tag" ]]; then
              TAGS_LIST="$TAGS_LIST\n- \`$tag\`"
            fi
          done <<< "${{ steps.meta.outputs.tags }}"
          
          # Create GitHub step summary
          cat << 'EOF' >> $GITHUB_STEP_SUMMARY
          ## 🎉 Docker Build & Release Success
          
          ### 📦 Images Built and Pushed
          EOF
          
          echo "${{ steps.meta.outputs.tags }}" | while IFS= read -r tag; do
            if [[ -n "$tag" ]]; then
              echo "- \`$tag\`" >> $GITHUB_STEP_SUMMARY
            fi
          done
          
          cat << 'EOF' >> $GITHUB_STEP_SUMMARY
          
          ### 🔧 Build Information
          - **Version**: `${{ steps.version.outputs.version }}`
          - **Build ID**: `${{ steps.docker-build.outputs.imageid }}`
          - **Digest**: `${{ steps.docker-build.outputs.digest }}`
          - **Platforms**: `linux/amd64`, `linux/arm64`
          - **Registry**: `${{ env.REGISTRY }}`
          - **Branch**: `${{ github.ref_name }}`
          - **Commit**: `${{ github.sha }}`
          EOF
          
          if [[ "${{ needs.semantic-release.outputs.new-release-published }}" == "true" ]]; then
            cat << 'EOF' >> $GITHUB_STEP_SUMMARY
          
          ### 🚀 New Release Information
          - **New Release**: `v${{ needs.semantic-release.outputs.new-release-version }}`
          - **Major Version**: `${{ needs.semantic-release.outputs.new-release-major-version }}`
          - **Minor Version**: `${{ needs.semantic-release.outputs.new-release-minor-version }}`
          - **Patch Version**: `${{ needs.semantic-release.outputs.new-release-patch-version }}`
          EOF
          fi
          
          if [[ -n "${{ steps.git-info.outputs.commits }}" ]]; then
            cat << 'EOF' >> $GITHUB_STEP_SUMMARY
          
          ### 📝 Recent Commits (since ${{ steps.git-info.outputs.prev-tag }})
          EOF
            echo "${{ steps.git-info.outputs.commits }}" >> $GITHUB_STEP_SUMMARY
          fi
          
          if [[ -n "${{ steps.git-info.outputs.prs }}" ]]; then
            cat << 'EOF' >> $GITHUB_STEP_SUMMARY
          
          ### 🔀 Merged Pull Requests
          EOF
            echo "${{ steps.git-info.outputs.prs }}" >> $GITHUB_STEP_SUMMARY
          fi
          
          cat << 'EOF' >> $GITHUB_STEP_SUMMARY
          
          ### 🔗 Usage Examples
          ```bash
          # Pull latest image
          docker pull ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest
          
          # Pull specific version
          docker pull ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ steps.version.outputs.version }}
          
          # Run container
          docker run -p 8080:8080 ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest
          ```
          EOF
          
          # Console output
          echo "🎉 SUCCESS: Docker images built and pushed successfully!"
          echo "📦 Images:"
          echo "${{ steps.meta.outputs.tags }}" | sed 's/^/  - /'
          echo "🔧 Version: ${{ steps.version.outputs.version }}"
          echo "📝 Commits since last release: ${{ steps.git-info.outputs.commit-count }}"

  notify-failure:
    name: Notify on Failure
    runs-on: ubuntu-latest
    needs: [test, build, semantic-release, docker-build]
    if: failure()

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Failure notification
        run: |
          # Determine which job failed
          FAILED_JOBS=""
          if [[ "${{ needs.test.result }}" == "failure" ]]; then
            FAILED_JOBS="$FAILED_JOBS\n- ❌ **Test Job**: Tests failed"
          fi
          if [[ "${{ needs.build.result }}" == "failure" ]]; then
            FAILED_JOBS="$FAILED_JOBS\n- ❌ **Build Job**: Binary compilation failed"
          fi
          if [[ "${{ needs.semantic-release.result }}" == "failure" ]]; then
            FAILED_JOBS="$FAILED_JOBS\n- ❌ **Semantic Release Job**: Version release failed"
          fi
          if [[ "${{ needs.docker-build.result }}" == "failure" ]]; then
            FAILED_JOBS="$FAILED_JOBS\n- ❌ **Docker Build Job**: Image build/push failed"
          fi
          
          # Get recent commits for context
          RECENT_COMMITS=$(git log --oneline -5 --pretty=format:"- %s (%an)")
          
          # Create failure summary
          cat << 'EOF' >> $GITHUB_STEP_SUMMARY
          ## ❌ Build Pipeline Failed
          
          ### 💥 Failed Jobs
          EOF
          
          echo -e "$FAILED_JOBS" >> $GITHUB_STEP_SUMMARY
          
          cat << 'EOF' >> $GITHUB_STEP_SUMMARY
          
          ### 🔍 Context Information
          - **Branch**: `${{ github.ref_name }}`
          - **Commit**: `${{ github.sha }}`
          - **Triggered by**: `${{ github.event_name }}`
          - **Actor**: `${{ github.actor }}`
          - **Workflow Run**: [${{ github.run_number }}](${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }})
          
          ### 📝 Recent Commits
          EOF
          
          echo "$RECENT_COMMITS" >> $GITHUB_STEP_SUMMARY
          
          cat << 'EOF' >> $GITHUB_STEP_SUMMARY
          
          ### 🔧 Troubleshooting
          - Check the failed job logs above
          - Verify commit message format for semantic-release
          - Ensure all tests pass locally
          - Check Docker file and build context
          - Verify secrets and permissions
          EOF
          
          # Console output
          echo "❌ FAILURE: Build pipeline failed!"
          echo "💥 Failed jobs:"
          echo -e "$FAILED_JOBS"
          echo "🔍 Check the workflow logs and step summary for details"