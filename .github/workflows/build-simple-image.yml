name: Simple-Image-CI

on:
  push:
    branches:
      - main
      - 53_caching
  pull_request:
    branches:
      - main
      - 53_caching
  workflow_dispatch: # Allows manually triggering the workflow
    inputs:
      version:
        description: 'Version tag for the Docker image (e.g., 1.0.0, v2.1.3)'
        required: true
        type: string
        default: 'latest'

env:
  CARGO_TERM_COLOR: always

jobs:
  test:
    name: Test
    runs-on: ubuntu-latest
    container:
      image: rust:1.86.0

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup caching
        uses: actions/cache@v4
        if: ${{ env.ACT != 'true' }}
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-cargo-

      - name: Manual cache setup for local run
        if: ${{ env.ACT == 'true' }}
        run: |
          echo "Running locally with act, manually setting up cache..."
          mkdir -p ~/.cargo/registry ~/.cargo/git target

      - name: Build
        run: cargo build

      - name: Run Tests
        run: cargo test

  build:
    name: Build ${{ matrix.platform }}
    runs-on: ubuntu-latest
    needs: test
    container:
      image: rust:1.86.0

    strategy:
      matrix:
        include:
          - platform: amd64
            target: x86_64-unknown-linux-gnu
            artifact-name: rust-binary-amd64
          - platform: arm64
            target: aarch64-unknown-linux-gnu
            artifact-name: rust-binary-arm64

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup caching
        uses: actions/cache@v4
        if: ${{ env.ACT != 'true' }}
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ${{ runner.os }}-cargo-${{ matrix.target }}-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-cargo-${{ matrix.target }}-
            ${{ runner.os }}-cargo-

      - name: Manual cache setup for local run
        if: ${{ env.ACT == 'true' }}
        run: |
          echo "Running locally with act, manually setting up cache..."
          mkdir -p ~/.cargo/registry ~/.cargo/git target

      - name: Install cross-compilation target
        run: rustup target add ${{ matrix.target }}

      - name: Setup ARM64 cross-compilation
        if: matrix.platform == 'arm64'
        run: |
          dpkg --add-architecture arm64
          apt-get update
          apt-get install -y \
            gcc-aarch64-linux-gnu \
            libc6-dev-arm64-cross \
            libssl-dev:arm64 \
            libpq-dev:arm64 \
            pkg-config

      - name: Configure ARM64 cross-compilation environment
        if: matrix.platform == 'arm64'
        run: |
          echo "CC_aarch64_unknown_linux_gnu=aarch64-linux-gnu-gcc" >> $GITHUB_ENV
          echo "CXX_aarch64_unknown_linux_gnu=aarch64-linux-gnu-g++" >> $GITHUB_ENV
          echo "AR_aarch64_unknown_linux_gnu=aarch64-linux-gnu-ar" >> $GITHUB_ENV
          echo "CARGO_TARGET_AARCH64_UNKNOWN_LINUX_GNU_LINKER=aarch64-linux-gnu-gcc" >> $GITHUB_ENV
          echo "PKG_CONFIG_ALLOW_CROSS=1" >> $GITHUB_ENV
          echo "PKG_CONFIG_PATH=/usr/lib/aarch64-linux-gnu/pkgconfig:/usr/lib/pkgconfig" >> $GITHUB_ENV
          echo "OPENSSL_DIR=/usr" >> $GITHUB_ENV
          echo "OPENSSL_LIB_DIR=/usr/lib/aarch64-linux-gnu" >> $GITHUB_ENV
          echo "OPENSSL_INCLUDE_DIR=/usr/include/openssl" >> $GITHUB_ENV

      - name: Build Release Binary
        run: cargo build --release --target ${{ matrix.target }}

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.artifact-name }}
          path: target/${{ matrix.target }}/release/rc-web
          retention-days: 1

  docker-build:
    name: Build Docker Image
    runs-on: ubuntu-latest
    needs: build
    if: github.event_name == 'push' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/53_caching') || startsWith(github.ref, 'refs/tags/')

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Download AMD64 build artifacts
        uses: actions/download-artifact@v4
        with:
          name: rust-binary-amd64
          path: target/x86_64-unknown-linux-gnu/release/

      - name: Download ARM64 build artifacts
        uses: actions/download-artifact@v4
        with:
          name: rust-binary-arm64
          path: target/aarch64-unknown-linux-gnu/release/

      - name: Make binaries executable
        run: |
          chmod +x target/x86_64-unknown-linux-gnu/release/rc-web
          chmod +x target/aarch64-unknown-linux-gnu/release/rc-web

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.PUSH_PKG_TO_RC_ORG }}

      - name: Get latest git tag
        id: latest_tag
        run: |
          # Get the latest tag, fallback to a default if no tags exist
          TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "0.0.0")
          echo "tag=${TAG}" >> $GITHUB_OUTPUT
          echo "Latest git tag: ${TAG}"

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ghcr.io/daksha-rc/rc-web
          tags: |
            type=ref,event=pr
            type=semver,pattern={{version}},enable=${{ startsWith(github.ref, 'refs/tags/') }}
            type=semver,pattern={{major}}.{{minor}},enable=${{ startsWith(github.ref, 'refs/tags/') }}
            type=raw,value=latest,enable={{is_default_branch}}
            type=raw,value=${{ github.event.inputs.version }},enable=${{ github.event_name == 'workflow_dispatch' && github.event.inputs.version != '' }}
            type=raw,value=${{ steps.latest_tag.outputs.tag }},enable=${{ github.event_name == 'push' }}

      - name: Generate platform-specific tags
        id: platform_tags
        run: |
          # Get all tags from metadata
          TAGS="${{ steps.meta.outputs.tags }}"
          
          # Initialize arrays for platform-specific tags
          AMD64_TAGS=""
          ARM64_TAGS=""
          ALL_PLATFORM_TAGS=""
          
          # Process each tag and create platform-specific variants
          echo "Processing tags to create platform-specific versions..."
          while IFS= read -r tag; do
            if [[ -n "$tag" ]]; then
              # Extract version from tag (everything after the last colon)
              VERSION=$(echo "$tag" | sed 's/.*://')
              BASE_IMAGE=$(echo "$tag" | sed 's/:.*//')
          
              # Create platform-specific tags
              AMD64_TAG="${BASE_IMAGE}:${VERSION}-amd64"
              ARM64_TAG="${BASE_IMAGE}:${VERSION}-arm64"
          
              # Add to arrays
              if [[ -n "$AMD64_TAGS" ]]; then
                AMD64_TAGS="${AMD64_TAGS},$AMD64_TAG"
              else
                AMD64_TAGS="$AMD64_TAG"
              fi
          
              if [[ -n "$ARM64_TAGS" ]]; then
                ARM64_TAGS="${ARM64_TAGS},$ARM64_TAG"
              else
                ARM64_TAGS="$ARM64_TAG"
              fi
          
              if [[ -n "$ALL_PLATFORM_TAGS" ]]; then
                ALL_PLATFORM_TAGS="${ALL_PLATFORM_TAGS},$AMD64_TAG,$ARM64_TAG"
              else
                ALL_PLATFORM_TAGS="$AMD64_TAG,$ARM64_TAG"
              fi
          
              echo "  Original: $tag"
              echo "  AMD64: $AMD64_TAG"
              echo "  ARM64: $ARM64_TAG"
            fi
          done <<< "$TAGS"
          
          # Combine original tags with platform-specific tags
          COMBINED_TAGS="$TAGS,$ALL_PLATFORM_TAGS"
          
          echo "amd64-tags=$AMD64_TAGS" >> $GITHUB_OUTPUT
          echo "arm64-tags=$ARM64_TAGS" >> $GITHUB_OUTPUT
          echo "all-tags=$COMBINED_TAGS" >> $GITHUB_OUTPUT
          
          echo "Generated platform-specific tags:"
          echo "AMD64 tags: $AMD64_TAGS"
          echo "ARM64 tags: $ARM64_TAGS"
          echo "All tags: $COMBINED_TAGS"

      - name: Build and push multi-platform Docker image
        id: build
        uses: docker/build-push-action@v6
        with:
          context: .
          file: ./rc-web/Dockerfile.simple
          push: true
          tags: ${{ steps.platform_tags.outputs.all-tags }}
          labels: ${{ steps.meta.outputs.labels }}
          platforms: linux/amd64,linux/arm64
          cache-from: type=gha
          cache-to: type=gha,mode=max
          outputs: type=image,name=target,annotation-index.org.opencontainers.image.description=Multi-platform Rust web application

      - name: Enhanced Success Notification
        if: success()
        run: |
          echo "üéâ DOCKER BUILD AND PUSH COMPLETED SUCCESSFULLY!"
          echo "=================================================================="
          echo ""
          echo "üì¶ REPOSITORY INFORMATION:"
          echo "  Repository: ghcr.io/daksha-rc/rc-web"
          echo "  Registry: GitHub Container Registry (ghcr.io)"
          echo "  Namespace: daksha-rc"
          echo "  Image Name: rc-web"
          echo "  Latest Git Tag: ${{ steps.latest_tag.outputs.tag }}"
          echo ""
          echo "üèóÔ∏è  BUILD INFORMATION:"
          echo "  Build ID: ${{ steps.build.outputs.imageid }}"
          echo "  Digest: ${{ steps.build.outputs.digest }}"
          echo "  Build Date: $(date -u '+%Y-%m-%d %H:%M:%S UTC')"
          echo "  Built From: ${{ github.ref_name }} (${{ github.sha }})"
          echo "  Latest Tag Found: ${{ steps.latest_tag.outputs.tag }}"
          echo "  Workflow: ${{ github.workflow }}"
          echo "  Run ID: ${{ github.run_id }}"
          echo "  Run Number: ${{ github.run_number }}"
          echo ""
          echo "üè∑Ô∏è  TAGS AND VERSIONS CREATED:"
          
          # Count total tags
          TOTAL_TAGS=$(echo "${{ steps.platform_tags.outputs.all-tags }}" | tr ',' '\n' | wc -l)
          echo "  Total Tags: $TOTAL_TAGS"
          echo "  Source Tag: ${{ steps.latest_tag.outputs.tag }}"
          echo ""
          
          # Display multi-platform tags
          echo "üåê MULTI-PLATFORM TAGS:"
          COUNTER=1
          echo "${{ steps.meta.outputs.tags }}" | while IFS= read -r tag; do
            if [[ -n "$tag" ]]; then
              TAG_VERSION=$(echo "$tag" | sed 's/.*://')
          
              if [[ "$TAG_VERSION" == "${{ steps.latest_tag.outputs.tag }}" ]]; then
                echo "  [$COUNTER] üè∑Ô∏è  $tag ‚≠ê (Latest Git Tag)"
              else
                echo "  [$COUNTER] üè∑Ô∏è  $tag"
              fi
          
              echo "      ‚îî‚îÄ‚îÄ Version: $TAG_VERSION"
              echo "      ‚îî‚îÄ‚îÄ Platforms: linux/amd64, linux/arm64"
              echo "      ‚îî‚îÄ‚îÄ Pull Command: docker pull $tag"
              echo ""
              COUNTER=$((COUNTER + 1))
            fi
          done
          
          # Display platform-specific tags
          echo "üîß PLATFORM-SPECIFIC TAGS:"
          echo ""
          echo "  AMD64 Tags:"
          COUNTER=1
          echo "${{ steps.platform_tags.outputs.amd64-tags }}" | tr ',' '\n' | while IFS= read -r tag; do
            if [[ -n "$tag" ]]; then
              TAG_VERSION=$(echo "$tag" | sed 's/.*://')
              echo "    [$COUNTER] üè∑Ô∏è  $tag"
              echo "        ‚îî‚îÄ‚îÄ Version: $TAG_VERSION"
              echo "        ‚îî‚îÄ‚îÄ Platform: linux/amd64 only"
              echo "        ‚îî‚îÄ‚îÄ Pull Command: docker pull $tag"
              echo ""
              COUNTER=$((COUNTER + 1))
            fi
          done
          
          echo "  ARM64 Tags:"
          COUNTER=1
          echo "${{ steps.platform_tags.outputs.arm64-tags }}" | tr ',' '\n' | while IFS= read -r tag; do
            if [[ -n "$tag" ]]; then
              TAG_VERSION=$(echo "$tag" | sed 's/.*://')
              echo "    [$COUNTER] üè∑Ô∏è  $tag"
              echo "        ‚îî‚îÄ‚îÄ Version: $TAG_VERSION"
              echo "        ‚îî‚îÄ‚îÄ Platform: linux/arm64 only"
              echo "        ‚îî‚îÄ‚îÄ Pull Command: docker pull $tag"
              echo ""
              COUNTER=$((COUNTER + 1))
            fi
          done
          
          echo ""
          echo "üåê SUPPORTED PLATFORMS:"
          echo "  ‚úÖ linux/amd64 (Intel/AMD 64-bit)"
          echo "  ‚úÖ linux/arm64 (ARM 64-bit / Apple Silicon)"
          echo ""
          echo "üìã IMAGE METADATA:"
          echo "  Labels: ${{ steps.meta.outputs.labels }}"
          echo ""
          echo "üîó REGISTRY AND USAGE LINKS:"
          echo "  üì¶ Package Page: https://github.com/daksha-rc/rc-web/pkgs/container/rc-web"
          echo "  üìö Documentation: https://docs.github.com/en/packages/working-with-a-github-packages-registry/working-with-the-container-registry"
          echo "  üîß Usage Examples:"
          echo ""
          echo "     # Pull latest multi-platform image"
          echo "     docker pull ghcr.io/daksha-rc/rc-web:latest"
          echo ""
          echo "     # Pull specific version (latest git tag: ${{ steps.latest_tag.outputs.tag }})"
          echo "     docker pull ghcr.io/daksha-rc/rc-web:${{ steps.latest_tag.outputs.tag }}"
          echo ""
          echo "     # Pull platform-specific images"
          echo "     docker pull ghcr.io/daksha-rc/rc-web:${{ steps.latest_tag.outputs.tag }}-amd64"
          echo "     docker pull ghcr.io/daksha-rc/rc-web:${{ steps.latest_tag.outputs.tag }}-arm64"
          echo ""
          echo "     # Run container"
          echo "     docker run -p 8080:8080 ghcr.io/daksha-rc/rc-web:latest"
          echo ""
          echo "     # Pull for specific platform (alternative method)"
          echo "     docker pull --platform linux/amd64 ghcr.io/daksha-rc/rc-web:latest"
          echo "     docker pull --platform linux/arm64 ghcr.io/daksha-rc/rc-web:latest"
          echo ""
          echo "üéØ DEPLOYMENT READY!"
          echo "  All images have been successfully built and pushed to the registry."
          echo "  Multi-platform support ensures compatibility across different architectures."
          echo "  Platform-specific tags available for targeted deployments."
          echo "  Latest version available: ${{ steps.latest_tag.outputs.tag }}"
          echo ""
          echo "=================================================================="
          echo "‚ú® Build completed at $(date -u '+%Y-%m-%d %H:%M:%S UTC')"
          echo "=================================================================="

      - name: Create deployment summary
        if: success()
        run: |
          echo "## üéâ Docker Build Success Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### üìã Build Information" >> $GITHUB_STEP_SUMMARY
          echo "- **Latest Git Tag**: \`${{ steps.latest_tag.outputs.tag }}\`" >> $GITHUB_STEP_SUMMARY
          echo "- **Build ID**: \`${{ steps.build.outputs.imageid }}\`" >> $GITHUB_STEP_SUMMARY
          echo "- **Digest**: \`${{ steps.build.outputs.digest }}\`" >> $GITHUB_STEP_SUMMARY
          echo "- **Platforms**: linux/amd64, linux/arm64" >> $GITHUB_STEP_SUMMARY
          echo "- **Registry**: GitHub Container Registry (ghcr.io)" >> $GITHUB_STEP_SUMMARY
          echo "- **Built from**: ${{ github.ref_name }} (\`${{ github.sha }}\`)" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### üì¶ Multi-Platform Images" >> $GITHUB_STEP_SUMMARY
          echo "| Tag | Version | Latest Tag | Platform Support | Pull Command |" >> $GITHUB_STEP_SUMMARY
          echo "|-----|---------|------------|------------------|--------------|" >> $GITHUB_STEP_SUMMARY
          
          echo "${{ steps.meta.outputs.tags }}" | while IFS= read -r tag; do
            if [[ -n "$tag" ]]; then
              TAG_VERSION=$(echo "$tag" | sed 's/.*://')
              if [[ "$TAG_VERSION" == "${{ steps.latest_tag.outputs.tag }}" ]]; then
                LATEST_INDICATOR="‚≠ê Yes"
              else
                LATEST_INDICATOR="No"
              fi
              echo "| \`$tag\` | \`$TAG_VERSION\` | $LATEST_INDICATOR | linux/amd64, linux/arm64 | \`docker pull $tag\` |" >> $GITHUB_STEP_SUMMARY
            fi
          done
          
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### üîß Platform-Specific Images" >> $GITHUB_STEP_SUMMARY
          echo "| Tag | Version | Platform | Pull Command |" >> $GITHUB_STEP_SUMMARY
          echo "|-----|---------|----------|--------------|" >> $GITHUB_STEP_SUMMARY
          
          # Add AMD64 platform-specific tags
          echo "${{ steps.platform_tags.outputs.amd64-tags }}" | tr ',' '\n' | while IFS= read -r tag; do
            if [[ -n "$tag" ]]; then
              TAG_VERSION=$(echo "$tag" | sed 's/.*://')
              echo "| \`$tag\` | \`$TAG_VERSION\` | linux/amd64 | \`docker pull $tag\` |" >> $GITHUB_STEP_SUMMARY
            fi
          done
          
          # Add ARM64 platform-specific tags
          echo "${{ steps.platform_tags.outputs.arm64-tags }}" | tr ',' '\n' | while IFS= read -r tag; do
            if [[ -n "$tag" ]]; then
              TAG_VERSION=$(echo "$tag" | sed 's/.*://')
              echo "| \`$tag\` | \`$TAG_VERSION\` | linux/arm64 | \`docker pull $tag\` |" >> $GITHUB_STEP_SUMMARY
            fi
          done
          
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### üîó Quick Links" >> $GITHUB_STEP_SUMMARY
          echo "- [üì¶ Package Registry](https://github.com/daksha-rc/rc-web/pkgs/container/rc-web)" >> $GITHUB_STEP_SUMMARY
          echo "- [üèóÔ∏è Build Details](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }})" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### üöÄ Quick Start" >> $GITHUB_STEP_SUMMARY
          echo "\`\`\`bash" >> $GITHUB_STEP_SUMMARY
          echo "# Pull latest multi-platform version" >> $GITHUB_STEP_SUMMARY
          echo "docker pull ghcr.io/daksha-rc/rc-web:${{ steps.latest_tag.outputs.tag }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "# Pull platform-specific versions" >> $GITHUB_STEP_SUMMARY
          echo "docker pull ghcr.io/daksha-rc/rc-web:${{ steps.latest_tag.outputs.tag }}-amd64" >> $GITHUB_STEP_SUMMARY
          echo "docker pull ghcr.io/daksha-rc/rc-web:${{ steps.latest_tag.outputs.tag }}-arm64" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "# Run container" >> $GITHUB_STEP_SUMMARY
          echo "docker run -p 8080:8080 ghcr.io/daksha-rc/rc-web:${{ steps.latest_tag.outputs.tag }}" >> $GITHUB_STEP_SUMMARY
          echo "\`\`\`" >> $GITHUB_STEP_SUMMARY