# Disabling workspace support
[config]
default_to_workspace = false


[tasks.clean]
description = "clean: remove the target directory"
category = "Build"
command = "cargo"
args = ["clean"]

[tasks.build]
command = "cargo"
env = { "SQLX_OFFLINE" = "true" }
args = ["build"]
dependencies = ["clean"]

[tasks.check]
description = "build: analyze the workspace and report errors, but don't build object files"
category = "Build"
env = { "SQLX_OFFLINE" = "true" }
command = "cargo"
args = ["check"]

[tasks.test]
description = "test: run the tests"
category = "Check"
env = { "SQLX_OFFLINE" = "true", "TEST_LOG" = "true", RUSTFLAGS = "-Cinstrument-coverage", LLVM_PROFILE_FILE = "target/%p-%m.profraw" }
command = "cargo"
args = ["test", "--no-fail-fast", "--", "--test-threads", "2"]

[tasks.code-coverage]
description = "llvm-cov: generate HTML coverage report"
category = "Check"
command = "cargo"
install_crate = { rustup_component_name = "llvm-tools-preview", binary = "llvm-profdata", test_arg = "--help" }
env = { "SQLX_OFFLINE" = "true", "TEST_LOG" = "true", RUSTFLAGS = "-Cinstrument-coverage", LLVM_PROFILE_FILE = "target/%p-%m.profraw" }
args = ["llvm-cov", "--html"]

[tasks.tarpaulin]
description = "tarpaulin: compute the code coverage"
category = "Check"
install_crate = "cargo-tarpaulin"
command = "cargo"
args = ["tarpaulin", "--out", "html", "--", "--test-threads", "2"]
disabled = true

[tasks.check-disk-space]
description = "check-disk-space: comprehensive disk space monitoring for host and Podman VM"
category = "System"
script_runner = "bash"
script = "scripts/check-disk-space.sh"
env = { "BASH_SILENCE_DEPRECATION_WARNING" = "1" }

[tasks.debug]
description = "debug: start rc-web in debug mode using mirrord with dynamic pod detection"
category = "Debug"
script_runner = "bash"
script = "scripts/debug-mirrord.sh"
env = { "BASH_SILENCE_DEPRECATION_WARNING" = "1" }

[tasks.build-image]
description = "build-image: build Docker image using nerdctl"
category = "Docker"
command = "nerdctl"
args = ["build", "-t", "ghcr.io/daksha-rc/rc-web:latest", "-f", "rc-web/Dockerfile", "."]

[tasks.build-push]
description = "build-push: build multi-platform Docker image and push to registry"
category = "Docker"
script_runner = "bash"
script = '''
# Get the current git tag
GIT_TAG=$(git describe --tags --exact-match 2>/dev/null || echo "")

# Build with latest tag and optionally with git tag
if [ -n "$GIT_TAG" ]; then
    echo "Building with tags: latest and $GIT_TAG"
    nerdctl build --platform=linux/amd64,linux/arm64 \
        -t ghcr.io/daksha-rc/rc-web:latest \
        -t ghcr.io/daksha-rc/rc-web:$GIT_TAG \
        -f rc-web/Dockerfile .
    nerdctl push --all-platforms ghcr.io/daksha-rc/rc-web:latest
    nerdctl push --all-platforms ghcr.io/daksha-rc/rc-web:$GIT_TAG
else
    echo "No git tag found, building with latest tag only"
    nerdctl build --platform=linux/amd64,linux/arm64 \
        -t ghcr.io/daksha-rc/rc-web:latest \
        -f rc-web/Dockerfile .
    nerdctl push --all-platforms ghcr.io/daksha-rc/rc-web:latest
fi
'''

[tasks.build-chef-base]
description = "build-chef-base: Build and push cargo-chef base image with system dependencies"
category = "Docker"
script_runner = "bash"
script = '''
#!/bin/bash
set -e

# Colors
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
NC='\033[0m'

# Get version from Cargo.toml or use timestamp
VERSION=$(grep '^version = ' Cargo.toml | sed 's/version = "\(.*\)"/\1/' | head -1)
if [ -z "$VERSION" ]; then
    VERSION=$(date +%Y%m%d%H%M%S)
fi

REGISTRY_URL="ghcr.io/daksha-rc"
IMAGE_NAME="cargo-chef-base"
DOCKERFILE="Dockerfile.chef"

# Build tags
LATEST_TAG="${REGISTRY_URL}/${IMAGE_NAME}:latest"
VERSION_TAG="${REGISTRY_URL}/${IMAGE_NAME}:${VERSION}"
RUST_VERSION_TAG="${REGISTRY_URL}/${IMAGE_NAME}:rust-1.86.0"

echo -e "${YELLOW}Building cargo-chef base image...${NC}"
echo "Version: ${VERSION}"
echo "Tags: ${LATEST_TAG}, ${VERSION_TAG}, ${RUST_VERSION_TAG}"

# Build with multiple tags
echo -e "${YELLOW}Building image...${NC}"
nerdctl build \
    -t "${LATEST_TAG}" \
    -t "${VERSION_TAG}" \
    -t "${RUST_VERSION_TAG}" \
    -f "${DOCKERFILE}" \
    .

echo -e "${YELLOW}Pushing images...${NC}"

# Push all tags
echo -e "${YELLOW}Pushing ${LATEST_TAG}...${NC}"
nerdctl push "${LATEST_TAG}"

echo -e "${YELLOW}Pushing ${VERSION_TAG}...${NC}"
nerdctl push "${VERSION_TAG}"

echo -e "${YELLOW}Pushing ${RUST_VERSION_TAG}...${NC}"
nerdctl push "${RUST_VERSION_TAG}"

echo -e "${GREEN}✅ Successfully built and pushed cargo-chef base image${NC}"
echo -e "${GREEN}   Latest: ${LATEST_TAG}${NC}"
echo -e "${GREEN}   Version: ${VERSION_TAG}${NC}"
echo -e "${GREEN}   Rust: ${RUST_VERSION_TAG}${NC}"
'''

[tasks.build-chef-base-local]
description = "build-chef-base-local: Build cargo-chef base image locally (no push)"
category = "Docker"
script_runner = "bash"
script = '''
#!/bin/bash
set -e

# Colors
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
NC='\033[0m'

# Get version from Cargo.toml or use timestamp
VERSION=$(grep '^version = ' Cargo.toml | sed 's/version = "\(.*\)"/\1/' | head -1)
if [ -z "$VERSION" ]; then
    VERSION=$(date +%Y%m%d%H%M%S)
fi

REGISTRY_URL="ghcr.io/daksha-rc"
IMAGE_NAME="cargo-chef-base"
DOCKERFILE="Dockerfile.chef"

# Build tags
LATEST_TAG="${REGISTRY_URL}/${IMAGE_NAME}:latest"
VERSION_TAG="${REGISTRY_URL}/${IMAGE_NAME}:${VERSION}"
RUST_VERSION_TAG="${REGISTRY_URL}/${IMAGE_NAME}:rust-1.86.0"
LOCAL_TAG="${IMAGE_NAME}:latest"

echo -e "${YELLOW}Building cargo-chef base image locally...${NC}"
echo "Version: ${VERSION}"
echo "Tags: ${LATEST_TAG}, ${VERSION_TAG}, ${RUST_VERSION_TAG}, ${LOCAL_TAG}"

# Build with multiple tags including local tag
echo -e "${YELLOW}Building image...${NC}"
nerdctl build \
    -t "${LATEST_TAG}" \
    -t "${VERSION_TAG}" \
    -t "${RUST_VERSION_TAG}" \
    -t "${LOCAL_TAG}" \
    -f "${DOCKERFILE}" \
    .

echo -e "${GREEN}✅ Successfully built cargo-chef base image locally${NC}"
echo -e "${GREEN}   Latest: ${LATEST_TAG}${NC}"
echo -e "${GREEN}   Version: ${VERSION_TAG}${NC}"
echo -e "${GREEN}   Rust: ${RUST_VERSION_TAG}${NC}"
echo -e "${GREEN}   Local: ${LOCAL_TAG}${NC}"
echo -e "${YELLOW}ℹ️  Use 'cargo make build-chef-base' to build and push to registry${NC}"
'''

[tasks.inspect-chef-base]
description = "inspect-chef-base: inspect the cargo-chef base image"
category = "Docker"
script_runner = "bash"
script = '''
#!/bin/bash

# Configuration
REGISTRY="ghcr.io"
NAMESPACE="daksha-rc"
IMAGE_NAME="cargo-chef-base"
FULL_IMAGE_NAME="${REGISTRY}/${NAMESPACE}/${IMAGE_NAME}"

# Colors for output
YELLOW='\033[1;33m'
GREEN='\033[0;32m'
NC='\033[0m' # No Color

echo -e "${YELLOW}Inspecting cargo-chef base image...${NC}"

# Check if image exists locally
if nerdctl images | grep -q "${FULL_IMAGE_NAME}"; then
    echo -e "${GREEN}✅ Image found locally${NC}"

    # Show image details
    echo -e "${YELLOW}Image details:${NC}"
    nerdctl images | grep "${FULL_IMAGE_NAME}" | head -5

    # Show image history
    echo -e "${YELLOW}Image layers:${NC}"
    nerdctl history "${FULL_IMAGE_NAME}:latest" 2>/dev/null || \
    nerdctl history "${FULL_IMAGE_NAME}:local" 2>/dev/null || \
    echo "No image found with :latest or :local tag"

    # Show image info
    echo -e "${YELLOW}Image info:${NC}"
    nerdctl inspect "${FULL_IMAGE_NAME}:latest" 2>/dev/null | \
    jq -r '.[] | {Id: .Id, Created: .Created, Size: .Size, Architecture: .Architecture, Os: .Os}' 2>/dev/null || \
    nerdctl inspect "${FULL_IMAGE_NAME}:local" 2>/dev/null | \
    jq -r '.[] | {Id: .Id, Created: .Created, Size: .Size, Architecture: .Architecture, Os: .Os}' 2>/dev/null || \
    echo "Unable to inspect image (jq might not be installed)"
else
    echo "Image not found locally. Try running: cargo make build-chef-base-local"
fi
'''