# Disabling workspace support
[config]
default_to_workspace = false


[tasks.clean]
description = "clean: remove the target directory"
category = "Build"
command = "cargo"
args = ["clean"]

[tasks.build]
command = "cargo"
env = { "SQLX_OFFLINE" = "true" }
args = ["build"]
dependencies = ["clean"]

[tasks.check]
description = "build: analyze the workspace and report errors, but don't build object files"
category = "Build"
env = { "SQLX_OFFLINE" = "true" }
command = "cargo"
args = ["check"]

[tasks.test]
description = "test: run the tests"
category = "Check"
env = { "SQLX_OFFLINE" = "true", "TEST_LOG" = "true", RUSTFLAGS = "-Cinstrument-coverage", LLVM_PROFILE_FILE = "target/%p-%m.profraw" }
command = "cargo"
args = ["test", "--no-fail-fast", "--", "--test-threads", "2"]

[tasks.code-coverage]
description = "llvm-cov: generate HTML coverage report"
category = "Check"
command = "cargo"
install_crate = { rustup_component_name = "llvm-tools-preview", binary = "llvm-profdata", test_arg = "--help" }
env = { "SQLX_OFFLINE" = "true", "TEST_LOG" = "true", RUSTFLAGS = "-Cinstrument-coverage", LLVM_PROFILE_FILE = "target/%p-%m.profraw" }
args = ["llvm-cov", "--html"]

[tasks.tarpaulin]
description = "tarpaulin: compute the code coverage"
category = "Check"
install_crate = "cargo-tarpaulin"
command = "cargo"
args = ["tarpaulin", "--out", "html", "--", "--test-threads", "2"]
disabled = true

[tasks.check-disk-space]
description = "check-disk-space: comprehensive disk space monitoring for host and Podman VM"
category = "System"
script_runner = "bash"
script = "scripts/check-disk-space.sh"
env = { "BASH_SILENCE_DEPRECATION_WARNING" = "1" }

[tasks.debug]
description = "debug: start rc-web in debug mode using mirrord with dynamic pod detection"
category = "Debug"
script_runner = "bash"
script = "scripts/debug-mirrord.sh"
env = { "BASH_SILENCE_DEPRECATION_WARNING" = "1" }

[tasks.build-image]
description = "build-image: build Docker image using nerdctl"
category = "Docker"
command = "nerdctl"
args = ["build", "-t", "ghcr.io/daksha-rc/rc-web:latest", "-f", "rc-web/Dockerfile", "."]

[tasks.build-push]
description = "build-push: build multi-platform Docker image and push to registry"
category = "Docker"
script_runner = "bash"
script = '''
# Get the current git tag
GIT_TAG=$(git describe --tags --exact-match 2>/dev/null || echo "")

# Build with latest tag and optionally with git tag
if [ -n "$GIT_TAG" ]; then
    echo "Building with tags: latest and $GIT_TAG"
    nerdctl build --platform=linux/amd64,linux/arm64 \
        -t ghcr.io/daksha-rc/rc-web:latest \
        -t ghcr.io/daksha-rc/rc-web:$GIT_TAG \
        -f rc-web/Dockerfile .
    nerdctl push --all-platforms ghcr.io/daksha-rc/rc-web:latest
    nerdctl push --all-platforms ghcr.io/daksha-rc/rc-web:$GIT_TAG
else
    echo "No git tag found, building with latest tag only"
    nerdctl build --platform=linux/amd64,linux/arm64 \
        -t ghcr.io/daksha-rc/rc-web:latest \
        -f rc-web/Dockerfile .
    nerdctl push --all-platforms ghcr.io/daksha-rc/rc-web:latest
fi
'''
